// Generated by CoffeeScript 1.10.0
import DS from 'ember-data';
var Question;

Question = DS.Model.extend({
  page: DS.belongsTo('page'),
  questionOptions: DS.hasMany('questionOption', {
    async: true
  }),
  caption: DS.attr('string'),
  type: DS.attr('string'),
  position: DS.attr('number'),
  layout: DS.attr('string', {
    defaultValue: 'left'
  }),
  radioLayout: DS.attr('string', {
    defaultValue: 'inline'
  }),
  required: DS.attr('boolean'),
  defaultAnswer: DS.attr('string'),
  min: DS.attr('number', {
    defaultValue: 0
  }),
  max: DS.attr('number', {
    defaultValue: 0
  }),
  step: DS.attr('number', {
    defaultValue: 1
  }),
  isDisplay: (function() {
    var ref;
    return (ref = this.get('type')) === "Questions::Divider" || ref === "Questions::Heading" || ref === "Questions::Label";
  }).property('type'),
  hasPurpose: (function() {
    return !Ember.isBlank(this.get('purpose'));
  }).property('purpose'),
  rangeOptions: (function() {
    var i, length, options;
    if (this.get('type') !== "Questions::RangeField") {
      return [];
    }
    options = (function() {
      var j, ref, ref1, ref2, results;
      results = [];
      for (i = j = ref = parseInt(this.get('min')), ref1 = parseInt(this.get('max')), ref2 = parseInt(this.get('step')); ref2 > 0 ? j <= ref1 : j >= ref1; i = j += ref2) {
        results.push({
          value: i
        });
      }
      return results;
    }).call(this);
    length = options.length;
    if (length % 2 === 1) {
      options[Math.floor(length / 2)].isMedian = true;
    }
    return options;
  }).property('type', 'min', 'max', 'step')
});

export default Question;
